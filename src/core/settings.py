"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.11.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
from dotenv import load_dotenv
from urllib.parse import urlparse

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG',default=False, cast=bool)
# DEBUG =False

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*').split(',') 

CSRF_TRUSTED_ORIGINS = [
    'https://madu-production-8901.up.railway.app',
    'https://app.madu.software',
    'https://madu.software',
    'https://media.madu.software',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dashboard', #  aplikasi dashboard
    'sensors', #  API sensors
    'rest_framework',
    'channels',  # Channels
    # Auth dengan allauth
    'django.contrib.sites',  # Wajib untuk allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # Provider Google
    'widget_tweaks', # Widget tweaks untuk form
    'accounts.apps.AccountsConfig',  # Custom app untuk allauth
    # theme
    'tailwind',
    'theme', 
    'django_browser_reload', # Browser reload
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',  
    "django_browser_reload.middleware.BrowserReloadMiddleware", # Browser reload
 
]

MIDDLEWARE += ['whitenoise.middleware.WhiteNoiseMiddleware']

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases



# Replace the DATABASES section of your settings.py with this
tmpPostgres = urlparse(os.getenv("DATABASE_URL"))

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': tmpPostgres.path.replace('/', ''),
        'USER': tmpPostgres.username,
        'PASSWORD': tmpPostgres.password,
        'HOST': tmpPostgres.hostname,
        'PORT': 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Auth backend dengan allauth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Backend default Django
    'allauth.account.auth_backends.AuthenticationBackend',  # Backend allauth
]



SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': '7902362226-3iqtd34i5fv5ceqeufiq091kvme2v8e6.apps.googleusercontent.com',
            'secret': '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',
            'key': ''
        }
    }
}

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Backend email untuk development



# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'https://static.madu.software/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_URL = 'https://media.madu.software/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),  # Pastikan folder static ada
]
CLOUDFLARE_R2_BUCKET=config('CLOUDFLARE_R2_BUCKET')
CLOUDFLARE_R2_ACCESS_KEY=config('CLOUDFLARE_R2_ACCESS_KEY')
CLOUDFLARE_R2_SECRET_KEY=config('CLOUDFLARE_R2_SECRET_KEY')
CLOUDFLARE_R2_BUCKET_ENDPOINT= config('CLOUDFLARE_R2_BUCKET_ENDPOINT')


CLOUDFLARE_R2_CONFIG_OPTIONS = {
    'bucket_name': CLOUDFLARE_R2_BUCKET,
    'access_key': CLOUDFLARE_R2_ACCESS_KEY,
    'secret_key': CLOUDFLARE_R2_SECRET_KEY,
    'endpoint_url': CLOUDFLARE_R2_BUCKET_ENDPOINT,
    'default_acl': 'public-read',
    'signature_version': 's3v4',

}
# if DEBUG:
#     # Untuk pengembangan, gunakan storage lokal
#     DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
#     STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
# else:
#     STORAGES={
#         'default': {
#             'BACKEND': 'helpers.cloudflare.storages.MediaFilesStorage',
#             'OPTIONS': CLOUDFLARE_R2_CONFIG_OPTIONS,
#         }, # default -> user/images/file flied upload
#         'staticfiles':{
#             'BACKEND': 'helpers.cloudflare.storages.StaticFilesStorage', #django-storages[s3]
#             'OPTIONS': CLOUDFLARE_R2_CONFIG_OPTIONS,
#         } # staticfiles -> static files

#     }

STORAGES={
        'default': {
            'BACKEND': 'helpers.cloudflare.storages.MediaFilesStorage',
            'OPTIONS': CLOUDFLARE_R2_CONFIG_OPTIONS,
        }, # default -> user/images/file flied upload
        'staticfiles':{
            'BACKEND': 'helpers.cloudflare.storages.StaticFilesStorage', #django-storages[s3]
            'OPTIONS': CLOUDFLARE_R2_CONFIG_OPTIONS,
        } # staticfiles -> static files
}


# Pastikan tambahkan middleware untuk white-noise
MIDDLEWARE += ['whitenoise.middleware.WhiteNoiseMiddleware']
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# SITE_ID = 1  # ID situs default untuk allauth

LOGIN_REDIRECT_URL = '/'  # Redirect setelah login berhasil
LOGOUT_REDIRECT_URL = '/'  # Redirect setelah logout berhasil




# EMAil 
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_AUTHENTICATION_METHOD = "username_email"  # Bisa login dengan username atau email
ACCOUNT_EMAIL_REQUIRED = True  # Email wajib diisi saat registrasi
ACCOUNT_USERNAME_REQUIRED = True  # Username juga wajib

# ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_ADAPTER = "accounts.adapters.MyAccountAdapter"
SOCIALACCOUNT_ADAPTER = 'accounts.adapters.MySocialAccountAdapter'
# email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'rikimchd@gmail.com'  # Ganti dengan Gmail Anda
EMAIL_HOST_PASSWORD = 'zigp uuiq koxg ehbq'  # App Password dari Gmail
DEFAULT_FROM_EMAIL = 'rikimchd@gmail.com'


ASGI_APPLICATION = 'core.routing.application' # Routing file untuk Channels


# UI
TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = [
    "127.0.0.1",
]
NPM_BIN_PATH = 'npm.cmd'


# websoket 

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}



